Zkouška
- všeobecné otázky

- jeden jazyk umět detailněji
- nebo esej na vhodné téma

- kontakt - 605 979 826

[Slajd 1]
- modře - jazyky udělány tak, aby se v nich dalo programovat
- červeně - udělal někdo, kdo chtěl udělat pořádek v pojmech
  - někdy v nich nešlo programovat
- šipky - vlivy

Basic
- jazyk pro kalkulačky
- filosofické boje, když přišel do škol
- po normování (norma velmi složitá) se to nikdo nechtěl učit
- před smrtí ho zachránil Microsoft

Cobol
- vzniknul na zakázku amerického námořnictva
- jako první si uvědomili, co je to soubor
- umožňoval specifikovat podobu souboru - abstrakce nad konkrétním ukládacím mechanismem
- měl pole
- měl record - strukturovaný typ
  - vhodné pro databázoidní aplikace
- po příchodu databází a tabulkových procesorů upadl do zapomnění
- kolem roku 2000 strach z Y2K - shánění programátorů pro dosud fungující systémy

Fortran
- obrovská zásoba numerických knihoven
- podprogram dostal číslo, provedl operace a následně na adresu toho čísla zapsal výsledek
  - přepsání si konstant 
- "zbožštění" - s ortodoxními programátory se nedalo domluvit
- zdrojový kód mohl být ve více souborech 

Algol 60? Asi, nebo fortran...
- bloková struktura jazyka
- rekurze
- pořádně definované předávání parametrů
- odfláknutý vstup a výstup

Algol 60
- neměl dělení na podprogramy 
- mnoho možných side efektů

Algol 68
- lidé s velkým rozhledem, kterým nikdo nerozumněl
- jazyk byl zničen napsáním učebnice ve formě matice
  - po řádcích vše, ale nejprve lehké, pak těžší, ...
  - po sloupcích jedno téma do hloubky

Pascal
- 1971--1973
- odstranil side efekty Algolu
- musel se upravit, aby šlo napsat kompilátor a používat ho
- Holan, Pelikán, Peterka napsali kompilátor na stroj 32KB RAM, co uměl zkompilovat 1k řádek
- distribuce - poslali jste pásku do Zurichu
  - autor na něj nahrál překladač (v Pascalu) a poslal ji zpátky
  - každý si pak mohl napsat doplněk překladače -> specifická rozšíření na každé univerzitě

Simula
- objektové programování
- vymyšlen lidmi dělajícími diskrétní simulace
- první jazyk, který se někdo pokoušel prodávat
- velmi předběhl dobu
- nadmnožina Algolu 60, včetně side efektů
- ~generace Forsta

PL/1
- IBM mělo takřka monopol u velkých výpočetních strojů
- IBM se rozhodlo udělat jazyk, ve kterém bude všechno
- učil ji Antonín Kučera
- jako první měl výjimky - po zpracování návrat za instrukci, co ji způsobila -> nepoužitelné

Ada
- USA pohrozily, že výzkumné instituce nedostanou peníze, pokud nebudou učit Adu
- Univerzity daly rady, jak by měla Ada vypadat, ale vojáci je vzali doslova
- kontrola překladačů pro certifikaci - každý přeloží právě celý jazyk
  - certifikované překladače nepoužitelné
  - necertifikované používané
- vyhnila, nahradilo ji C++
- C++ převzalo výjimky a šablony z Ady

APL
- abeceda používající 80 písmen
- používali hlavně ve Francii
- typický program měl 1 řádku

2. přednáška
============
[Slajd 2 - letopočty]
Algol 60
- z roku 1960
  - vydána pouze zpráva
  - nikdo moc nepoužíval
  - neexistoval kompilátor

Lisp
- interaktivní, v té době počítače typicky interaktivní nebyly

Algol 68
- byl k němu kompilátor

Pascal
- 1971 vyšla knížka
  - zajímavá učebnice, ale jazyk se nakonec vyvinul jinak

[Slajd 3 - Basic]
Basic
- programovatelné kalkulačky
- for cyklus nebyl
  - efektivně bylo for návěští a next skákalo zpátky na hlavičku
  - next mohlo být více

[Slajd 4 - Fortran - zdroje]

[Slajd 5 - Fortran - relikty z děrných štítků]
[Slajd 6 - Fortran - mezera není významná]
[Slajd 7 - Fortran - deklarace]
- podle názvu proměnné se předpokládá typ (i,j,k,l přirozená, x,y,z reálná)
- CHARACTER až od F77 - Fortran byl určen pro programování a ne zpracování textu
[Slajd 8 - Fortran - I/O]
- vstup a výstup 
  - inovace, jiné jazyky to neměly
  - READ(n,m)
    - n - číslo zařízení - vstupní a výstupní zařízení očíslovány
    - m - číslo návěští formátovacího řetězce
  - FORMAT - fotmátovací řetězec
    - X - mezera
    - I - integer
    - H - pevný řetězec, následuje
[Slajd 9 - Fortran - formátovací ukázky]
[Slajd 10 - Fortran - podmíněný příkaz]
- cyklus - krok volitelný
  - provedl se vždy alespoň jednou
[Slajd 11 - Fortran - výraz]
[Slajd 12 - Fortran - program pro výraz]
[Slajd 13 - Fortran - předávání parametrů]
- předávala se adresa argumentu
  - hrozilo přepsání konstant
[Slajd 14 - Fortran - pole]
- pole se ukládají po sloupcích
- můžu předat jako argument obecné pole, tudíž umím dělat např. skalární součin pro obecné vektory
[Slajd 15]
[Slajd 16 - Fortran - Common]
- obdoba struktur
- mohou se překrývat - union
[Slajd 17 - Fortran - dokončení]
[Slajd 18 - Fortran - chyby]
- výbuch sondy kvůli kolizním konstrukcím
  - přiřazení DO10I = 1.3 místo DO 10 I=1,3


Algol
-----
[Slajd 19 - Algol - výhody a nevýhody]
- side efekty
[Slajd 20 - Algol - bloková struktura]
- konstrukce begin-end
- dynamická pole
- středník
[Slajd 21 - Algol - cyklus]
- jako seznam, přes který iteruji řídící proměnnou, můžu použít libovolně sestavený seznam
- řídící proměnná cyklu může být měněna v cyklu i indexována
[Slajd 22 - Algol - předávání parametrů]
- předávání jménem
  - předám způsob, kterým se adresa zjistí 
  - zjištění hodnoty se provede textovým dosazení tam, kde parametr používám
[Slajd 23 - Algol - podmíněné příkazy]
- šly psát složité podmíněné příkazy
  - se side-efekty
[Slajd 24 - Algol - učebnice]
[Slajd 25 - Algol 68]
- ortogonální návrh
  - každou věc lze udělat jen jedním způsobem
- příliš přesné definice -> složité
- není standardizována separátní kompilace
- Ortogonální učebnice

APL
---
[Slajd 26 - APL - oneliner]

----- 3. přednáška -----

Algol 68
--------
- vytvářen, aby se kompilátor dokázal vzpamatovat z chyb
- každý blokový příkaz ukončen jménem pozpátku -> do - od, case - esac

Hoarova logika
--------------
- sémantika přiřazovacích příkazů
[Slajd 27,28,29 - učebnice Algolu ve slovenštině]

Turbopascal
-----------
- přeložen do češtiny a několikrát do slovenštiny
- slovenština: do -> : kolize s návěštím

[Slajd 30 - APL]
APL
---
- interaktivní jazyk
- velmi stručný, ale mnoho symbolů
- mnoho operací
- přetěžování operátorů
  - podle typu argumentu se provede daná operace
- logické hodnoty jsou 1 pro ano a 0 pro ne
[Slajd 31 - APL - abeceda]
- speciální abeceda, znaky obvykle nebyly na klávesnici
- rozsáhlé operace s maticemi - výběr sloupců a řádků
- přiřazení šipkou doleva
  - opět záleží na operandu
[Slajd 32 - APL - generátory]
- řecké iota - generuje seznam
- rho - generuje vícerozměrné pole
- lomítko - komprese - před lomítkem maska, které prvky vybírat, za ním seznam
  - maska se může vytvořit z podmínek
[Slajd 33 - APL - skoky]
- šipka doprava - skok
  - obvykle číslo řádky
- přiřazení má hodnotu - znovu se objevilo až v C
- tři základní operátory
  - redukce - lomítko
    - součet prvků pole
    - součet matice po řádcích / po sloupcích
[Slajd 34 - APL - operace]
  - vnitřní součin
    - tečka
    - operátor mezi dvěma binárními operátory
  - vnější součin
    - kroužek jako u stupňů a tečka
[Slajd 35 - APL - operace]
[Slajd 36 - APL - scan]
    - vyrobí matici z dvou vektorů a dodané operace mezi nimi
- zpětné lomítko - scan
  - fold
[Slajd 37 - APL - rho]
- rho - velikost matice
  - jako unární
[Slajd 38 - APL - prvočísla]
- výpočet prvočísel
[Slajd 39 - APL - prvočísla v kalkulačce]
- výpočet prvočísel v kalkulačce
  - vyhodnocuje se zprava
[Slajd 40 - APL - výhody a nevýhody]
- plusy
  - interaktivnost
  - stručnost
  - výkonná kalkulačka
  - dynamické typy
    - numeric, character, boolean, pole

PL/1
----
- mnoho datových typů -> mnoho konverzí -> pomalý
[Slajd 41 - PL/1 - výjimky]
- po zpracování výjimky návrat tam, kde nastala
[Slajd 42 - PL/1 - úvod]
- JCL - ovládání zavádění programů
 
----- 4.přednáška -----
Simula 67
--------
[Slajd 43 - Simula]
- nadmnožina Algolu
- z Norska
- směřována o objektovému programování
- první jazyk, který se pokoušeli prodávat
  - bylo zvykem koupit hardware a případně OS, zbytek ne
- velmi předběhl svou dobu
[Slajd 44 - Simula - datové typy]
- stáhnout si kapitolu ze skript o Simule
  - příště se bude brát podrobně
- datové typy
  - text - velmi silný a pohodlný prostředek
- proměnné definovány v blocích mezi begin a end
  - lokální
- třídy - jen pointery na ně
[Slajd 45 - Simula - přiřazování]
- dva přiřazovací příkazy
  - pro klasické typy a pro třídy
  - u textů 
- možné zře
[Slajd 46 - Simula - příkazy]
- for cyklus může za parametr dostat
  - výčet prvků
  - step until
  - while element
- while cyklus
  - v algolu nebyl
[Slajd 47 - Simula - výrazy]
- umocňování - **
  - podle typů vedlo na mnoho různých algoritmů -> nejasnosti
  - do jiných jazyků se nepřeneslo
[Slajd 48 - Simula - podprogramy]
- specifikace typů parametrů až za hlavičkou procedury
- automatická inicializace
[Slajd 49 - Simula - třídy]
- dynamická alokace objektů na haldě
[Slajd 50 - Simula - třídy]
- při zavolání new se spustí operační část - konstruktor
[Slajd 51 - Simula - třídy]
- kompilátor čte zdroják třikrát - odpředu, odzadu, odpředu
[Slajd 52 - Simula - podtřídy]
- má i virtuální metody
[Slajd 53 - Simula - podtřídy]
- podtřída dědí parametry a metody od mateřské třídy
- nejprve se zavolá konstruktor rodiče, pak dětí
[Slajd 54 - Simula - kvalifikátory]
- kvalifikace - ověřování, zda nevoláme metodu/atribut dítěte na otci
[Slajd 55 - Simula - kvalifikátory]
- přetypování na dítě pomocí qua
- mohu testovat na třídu či podtřídu
[Slajd 56 - Simula - inspect]
- inspect - chci operovat s objektem
  - spuštění příkazů nad objektem
  - druhá varianta vykonává příkazy podle typu daného objektu
[Slajd 57 - Simula - virtuálnost]
- virtuální mohly být i návěští
[Slajd 58 - Simula - štěpení konstruktoru]
- kontruktor může být rozdělen voláním inner
  - skočí do konstruktoru podtřídy (pokud taková je)
  - po jeho skončení pokračuje dále
[Slajd 59 - Simula - ochrana lokálních objektů]
- až v novější Simule
- protected - jen ve třídě a podtřídách
- hidden - není vidět z podtříd
[Slajd 60 - Simula - seznamy] 
- práce s obousměrnými seznamy
  - head - typ hlavy
    - jediný skutečný typ
    - metody
      - first, last, empty, cardinal, clear
  - link - abstraktní typ prvků
    - prvky, které chtějí být v seznamu, z ní dědí
    - metody
      - out - vyhození ze seznamu
      - follow, precede
      - into - vložení do seznamu
  - linkage - společné atributy link a head
    - atributy pred a suc
      - nejsou viditelné uživatelům
    - metody pred a suc
      - vrací ukazatel na link
[Slajd 61 - Simula - seznamy]
- pokud prefixuji abstraktní třídou blok, pak v něm mohu používat atributy prefixující třídy
[Slajd 62 - Simula - seznamy]
[Slajd 63 - Simula - seznamy]
[Slajd 64 - Simula - seznamy]
[Slajd 65 - Simula - seznamy]
[Slajd 66 - Simula - seznamy]

5.prednaska
===========
- předávání jménem
  - výpočet adresy, kde leží proměnná, se provede při každém použití parametru, nikoli při vstupu do funkce
[Slajd 67 - Simula - datové typy]
[Slajd 68 - Simula - text]
[Slajd 69 - Simula - text]
[Slajd 70 - Simula - text]
[Slajd 71 - Simula - podtext]
[Slajd 72 - Simula - kvaziparalelismus]
- paralelismus
  - udržuji zásobník rozpracovaných úloh a přepínám mezi nimi
- hierarchie bloků
  - statická - jak je zapsána v kódu
  - dynamická - jak je volána

- prefixovaný blok třídou může obsahovat podprogramy
  - ty vznikají z tříd uvnitř prefixovaného bloku
[Slajd 73 - Simula - stavy bloků]
[Slajd 74 - Simula - schéma volání]
[Slajd 75 - Simula - detach]
- detach
  - třída se osamostatní
    - vytvoří si vlastní čítač instrukcí
  - hlavní program se vrátí tam, kde byla procedura s detach zavolána
[Slajd 76 - Simula - detach]
[Slajd 77 - Simula - resume a call]
- resume - vzdám se řízení ve prospěch jiného bloku
  - to, komu ho předávám, si musím říct
- call
[Slajd 78 - Simula - třída Simulation]
- kalendář
  - událostní
  - procesní
- proces
  - aktivní - počítá
  - suspendovaný - nepočítá, ale má záznam v tabulce událostí
  - ukončený - již na něj nikdy řada nepřijde
  - pasivní - existuje, ale není naplánován
[Slajd 79 - Simula - Simset]
[Slajd 80 - Simula - Double link lists]
[Slajd 81 - Simula - Simset]
[Slajd 82 - Simula - ukazatele v SQS]
- SQS 
  - evidence událostí
    - každá má ukazatel na proces, který jí patří
    - každý proces má ukazatel na nejbližší událost
  - procedury
    - suc - následující událost nebo none
    - prev - předchozí událost
[Slajd 83 - Simula - Simset]
- EVENTNOTICE
  - jedna událost
  - procedury current (aktuální proces) a time (čas aktuální události)
[Slajd 84 - Simula - třída process]
[Slajd 85 - Simula - třída process]
[Slajd 86 - Simula - třída process]
- process
  - při spuštění se provede detach - počítat zatím nebude
  - když na něj přijde řada, zavolá se inner - skutečná výkonná funkce
  - když tato doběhne, nastaví se TERMINATED na true a passivate
    - uklidí své výskyty z kalendáře
  - pokud znovu dostane řízení, je to chyba => ERROR
[Slajd 87 - Simula - plánovací prostředky]
- hold(t) - čekám čas t
  - pokud nikdo nechce v mezičase počítat, akorát se zvětší simulační čas
  - jinak běží procesy v mezičase
- wait(s) - odstraní se z plánu a zařadí se na konec fronty s
- cancel(x) - odstraním z plánu proces x
[Slajd 88 - Simula - implementace passivate]
[Slajd 89 - Simula - implementace passivate]
[Slajd 90 - Simula - implementace wait]
[Slajd 91 - Simula - aktivační prostředky]
- aktivace
  - v čase
  - v čase před ostatními
  - za čas
  - za čas před ostatními
  - před někým
  - po někom
[Slajd 92 - Simula - hlavní program]
[Slajd 93 - Simula - hlavní program]
- třída simulation
  - viz stránky, LS 2011/12 - skripta o třídě Simulation

5. prednaska
------------
  - člen current - to, co aktuálně běží
  - passivate - odstranit z fronty
  - aktivační prostředky
    - activate - když nemám záznam ve frontě
    - reactivate - když už tam záznam je
[Slajd 94 - Simula - hlavní program]
[Slajd 95 - Simula - převážení písku]
[Slajd 96 - Simula - převážení písku]
[Slajd 97 - Simula - převážení písku]
[Slajd 98 - Simula - převážení písku]
- převážení písku
  - převážím písek z jedné hormady na druhou
  - hlavní program jen inicializuje auta a pasibuje se
  - výkonná logika je v třídě auto
[Slajd 99 - Simula - převážení písku]
  - třída auto
    - transport - počkej, než tam dojedeš
    - waiting - zařaď do fronty
    - departure - opusť frontu a aktivuj dalšího
[Slajd 100 - Simula - převážení písku]

Diskrétní simulace
==================
[Slajd 101 - Simula - parodie na písemku]

Pascal
======
- nikdy nebyl prakticky normován

Tabulka virtuálních metod
=========================
- pro každý typ jedna
- ukazuje pro každou funkci, kam se má překládat
- při vzniku objektu se v něm uloží odkaz na správnou tabulku
- alternativa - jedna velká tabulka
  - jako databáze
  - klíč třída+jméno_metody
  - hodnota je pointer na funkci

Ada
===
# Slajdy na mobilu
[Slajd 102 - Ada - úvod]
- hvězdné války - střely s plochou dráhou letu, řízené střely
- první jednočipové počítače
[Slajd 103 - Ada - cíle]
- výjimky až v druhé verzi
[Slajd 104 - Ada - vlastnosti]
- předpokládálo se, že se bude kompilovat na superpočítačích a poběží všude
- mnoho způsobů zápisu čísla
[Slajd 105 - Ada - typy]
[Slajd 106 - Ada - typy]
[Slajd 107 - Ada - bloky]
[Slajd 108 - Ada - typy]
[Slajd 109 - Ada - podtypy]
- podtypy - spíše typ + omezení
  - například omezení hodnot na interval
[Slajd 110 - Ada - matematické operace]
[Slajd 111 - Ada - výčtové typy]
- každý typ má atributy
  - first, last, succ, pred, pos, val
[Slajd 112 - Ada - přetěžování identifikátorů]
[Slajd 113 - Ada - binární operátory]
[Slajd 114 - Ada - and then, or else]
- and then, or else
  - zkrácené vyhodnocování
[Slajd 115 - Ada - příkazy]
- příkazy
  - null - prázdný příkaz
  - entry call - volání assembleru / nativního kódu
[Slajd 116 - Ada - řídící struktury]
- všechny struktury ukončeny end název_struktury
- každý příkaz končí ;
[Slajd 117 - Ada - příklady]
[Slajd 118 - Ada - case]
[Slajd 119 - Ada - and then]
[Slajd 120 - Ada - case]
[Slajd 121 - Ada - case]
[Slajd 122 - Ada - cykly]
- cykly
  - vyskočení pomocí exit when
[Slajd 123 - Ada - cykly]
[Slajd 124 - Ada - for]
  - for
    - řídící proměnná má smysl pouze uvnitř cyklu
  - exit ukončí nejbližší cyklus
  - cykly můžu pojmenovat a pak skákat na návěští
[Slajd 125 - Ada - for]
[Slajd 126 - Ada - návěští]
[Slajd 127 - Ada - pole]
[Slajd 128 - Ada - cykly a pole]
[Slajd 129 - Ada - typy a pole]
[Slajd 130 - Ada - pole bez mezí] 
[Slajd 131 - Ada - přiřazování vektorů]
[Slajd 132 - Ada - agregace]
[Slajd 132 - Ada - agregace]
[Slajd 133 - Ada - character]
[Slajd 134 - Ada - operace se stringy]
- někdy musím definovat kontext - je-li to řetězec nebo římské číslo
[Slajd 135 - Ada - record]
- record
  - nastavování recordu mohu udělat i jako klíč-hodnota
[Slajd 136 - Ada - record]
  - atributy mohou záviset na jiných
[Slajd 137 - Ada - čtvercová matice]
[Slajd 138 - Ada - podprogramy]
- funkce
  - nikdy nesmí doběhnout do endu, musí být ukončena returnem
[Slajd 139 - Ada - podprogramy]
[Slajd 140 - Ada - skalární součin]
[Slajd 141 - Ada - předávání parametrů]
[Slajd 142 - Ada - předávání parametrů]
[Slajd 143 - Ada - kvadratická rovnice]
[Slajd 144 - Ada - kvadratická rovnice]

# 8.4.
[Slajd 145 - Ada - předávání parametrů]
[Slajd 146 - Ada - otočení vektoru]
[Slajd 147 - Ada - otočení vektoru]
[Slajd 148 - Ada - předávání bez mezí]
[Slajd 149 - Ada - paralelismus]
[Slajd 150 - Ada - paralelismus]
- paralelismus
  - při zavolání funkce se automaticky aktivují tasky uvnitř ní
[Slajd 151 - Ada - časový průběh tasků] 
  - tasky startují až poté co doběhne deklarace rodičovské procedury
  - rodičovská procedura se rozběhne poté, co všechny tasky dokončí inicializaci
  - po doběhnutí čeká rodičovská procedura na děti
[Slajd 152 - Ada - časový průběh tasků] 
- typy
  - private - má jen přiřazovací příkaz a =
    - nejsou vidět vnitřní metody
  - limited private - nemá žádné metody
[Slajd 153 - Ada - rendezvous]
- synchronizace
  - entry - volám jiný task, čekám na něj
  - accept - přijímám volání
    - může mít tělo
[Slajd 154 - Ada - nákupy]
[Slajd 155 - Ada - nákupy]
[Slajd 156 - Ada - buffer]
[Slajd 157 - Ada - buffer]
[Slajd 158 - Ada - buffering]
[Slajd 159 - Ada - buffering] - chybí, viz Filip
- select
  - vybere se jedna z větví, která přijde nejdříve
[Slajd 160 - Ada - chráněná proměnná] - chybí, viz Filip
[Slajd 161 - Ada - sdílení času] - chybí, viz Filip
[Slajd 162 - Ada - select] - chybí, viz Filip
  - or - čekám na první událost
  - else - vyhodnotím ihned, kam mohu ihned jít
[Slajd 163 - Ada - příkazy] - chybí, viz Filip 
[Slajd 164 - Ada - přetěžování] - chybí, viz Filip
- přetěžování
  - mohu přetížit operátory i podprogramy
  - musím zachovat aritu
[Slajd 165 - Ada - package] - chybí, viz Filip 
[Slajd 166 - Ada - zásobník] - chybí, viz Filip
[Slajd 167 - Ada - privátní typy] - chybí, viz Filip
[Slajd 168 - Ada - privátní typy] - chybí, viz Filip

# 14.4. - chybí (M&M)

#Slajdy budou od Filipa

Strukturované programování
- konec 60. let
- podprogramy původně pro zkracování kódu
  - oblíbené také samoupravující se programy
- role podprogramů
  - podprogram je něco, co má svou vlastní roli, smysl
- strukturovaná data
  - dříve používané hlavně pole
  - v Cobolu byl record, v Pascalu množina
- strukturované příkazy
  - místo goto a switch
  - return, exit, continue, break
  - while, for
- čitelnost
- modifikovatelnost

Pascal
- 1973 - první překladač
  - neměl dispose
- množinu
  - setof typ
  - uloženo jako bitmapa
  - používáno pro vytváření posloupností jedniček a nul v paměti 
- record
  - uvnitř mohu podle hodnoty nějaké položky definovat další položky - něco jako union
- datové soubory vs. textové
  - přístupové operátory - mohu otestovat, než začnu pracovat se souborem
- dynamickou alokaci
  - jednoprůchodová kompilace - kromě ukazatelů
    - musím definovat dopředu, stačí mu, že je to ukazatel, pak si doplní sám
  - new - vytvoří nový objekt na hladě
  - dispose - zahodí objekt z haldy
  - dříve
     - mark(P) - označí si, kam až sahal heap
     - release(P) - to, co se alokovalo po marku se uvolní
- dlouho nebyl normován
  - "průmyslový standard" byl Borland Pascal
- Delphi
  - první rozumný způsob, jak programovat pro Windows bez Windows API

Modulární programování
- separátní kompilace
- modul - na data sahám pomocí metod
- Modula 2
  - vymyslel Wirth
  - příliš se nepovedl
- Ada

Objektové programování
- nahradilo modulární programování

CLU
- 1977
- chtěl ukázat datovou abstrakci
- objekty - mají typy
  - proměnné jsou odkazy na objekty
  - alokují se na heapu
  - mají konstruktor
  - GC
- přiřazením jen ukážu na ten samý objekt
- dosazení za složku objektu se převede na volání funkce
  - čtení složky spíše ne
- příklad - četnost slov
- cluster
  - obecný typ
  - můžu napsat seznam metod, které bude objekt mít
- oneof
  - typ bude jeden z výčtu - ~union
- iterátory
  - for deklarace in volání_iterátoru do tělo end;
- umožňuje i generika 
  - může mít požadavky na metody typů

C
- cíl - nahradit assembler
- systémové programování
- novinky
  - pohled na pole jako pointery
  - pointerová aritmetika
- časem začal chybět objektový pohled
- původní K&R nemělo při deklaraci typované argumenty funkcí
- lind
  - kontrola potenciálně nebezpečných konstrukcí
- idea - budou napsány systémové třídy a programování pak bude v jednodušším jazyce

C++
- dynamičtěji se rozvíjející než Java
- problémy
  - objekty i na zásobníku
  - neexistuje společný předek
  - vícenásobná dědičnost
    - dnes se spíše řeší přes interface
    - řešení - virtuální dědičnost
      - rodič není podobjekt, ale jen ukazatel na něj
  - programátoři jsou drazí, protože jazyk je složitý


Java
- reakce na C++
- teze
  - kód musí být přenositelný
  - snaha zbavit se složitých pojmů z C++
  - bajtkód místo přímé kompilace
- zrušena
  - pointerová aritmetika
  - vícenásobná dědičnost
    - dědím jen od jednoho předka, zbytek interface
- číselné typy neobjektové
  - ale ke každému existuje wrap třída
- Javadoc

Python

