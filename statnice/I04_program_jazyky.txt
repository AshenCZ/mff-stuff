=============
= léto 2017 =
=============
(nezveřejněno)

4. Programovací jazyky: princip objektového návrhu
	Předpokládejte, že navrhujete objektový model editoru pro 2D vektorovou grafiku. Editor má dovolit uživateli vybírat z nabídky různých typů grafických tvarů (přímka, čtverec, kružnice ...) - tvar se nejprve vyber podle názvu a pak kliknutím umístí na plochu.

	1. Navrhněte objektový model (hierarchii tříd, rozhraní objektů, signatury metod) umožňující snadno implementovat nové druhy tvarů. Rozhraní by mělo dovolit registraci každého typu grafického tvaru v editoru a dále vykreslování tvarů.
	2. Doplňte model tak, aby uživatel editoru mohl zadávat parametry tvarů. Poečet a názvy parametrů jsou pro každý typ tvaru jiné. typ parametru je vždy double.

	Pro řešení úlohy si vyberte jeden z jazyků Java, Cěě, C#. Při hodnodnocení odpovědi nebudou uvažovány drobné syntaktické chyby, ale obecně by použité konstrukce měly odpovídat zvolenému programovacímu jazyku.

-----
Mail s Tůmou (ředseda komise):
-----

> 2) Programovací jazyky: principy objektového návrhu
> ...
> Ráda bych se dozvěděla, jakým způsobem měla být řešena tato úloha a ve kterých povinných či povinně volitelných předmětech (pro zaměření Obecná informatika) byly probírány metody umožňující řešení tohoto problému.

Odpověď:
Ve zkratce, zadání požadovalo navrhnout model, který "dovolí registraci každého typu tvaru" a "zadávání parametrů tvarů".  Tedy například použít variaci na téma Factory Design Pattern (skicuji):

public abstract class ShapeType {
	  abstract public String [] getParameters ();
	    abstract public Shape makeShape (Parameters params);
}

public class SquareShapeType extends ShapeType {
	  @Override
	    public String [] getParameters () {
			    return (new String [] { "side" });
				  }
				    @Override
					  public Shape makeShape (Parameters params) {
						      return (new SquareShape (params));
							    }
}

...

public abstract class Shape {
	  abstract public void draw ();
}

public class SquareShape extends Shape {
	  public SquareShape (Parameters params) { ... }
	    @Override
		  public void draw () { ... }
}

...

Registrace nového tvaru by pak byla otázkou volání nějaké metody register (ShapeType type, String name) uvnitř editoru, konstrukce s parametry je řešena typem Parameters, který by měl být seznam párů String, double.

Toto je jedno z více možných řešení, ke kterému se všechny konstrukce probíraly na úvodním předmětu programování z Javy, podobně C# a C++. Studenti řešili úlohu zhruba takto, nebo s použitím jedné třídy reprezentující jak typ, tak instanci tvaru a metodou pro vytvoření instance, nebo například s použitím introspekce na datových typech (takové řešení bych již pokládal za poměrně pokročilé).


=============
= jaro 2017 =
=============
nic

===============
= podzim 2016 =
===============

11. Neprocedurální programování
    1. Mějme následující predikáty v Prologu:
        muz( adam ).           %adam je muz          
        muz( hugo ).           %hugo je muz             
        zena ( eva ).          %eva je zena           
        rodic ( adam , hugo ). %adam je rodicem huga 
        rodic ( eva , hugo ).  %eva je rodicem huga  
		 atd.
		Napište predikáty otec/2 a dedecek/2 s následujícím významem:
		otec (Ot , Di)    % "Ot" j e otcem "Di"
		dedecek (De , Di) % "De" j e dedeckem "Di"
	   * otec(Ot,Di) :- muz(Ot), rodic(Ot, Di).
	   * dedecek(De,Di) :- muz(De), rodic(De,Ot), rodic(Ot,Di).

	2. Jak jsou v Prologu definovány seznamy ?
	   * Jako datová struktura s předdefinovaným predikátem tečka(zřetězení).
	   * Prázdný seznam []
	   * Seznam s prvky [a,b,c]
	   * .(a,b) je [a,b]
	   * zápis .(hlava, tělo) jde psát ekvivalentně [hlava | tělo], kde hlava jsou prvek (nebo více oddělené čárkou), tělo je seznam.
	   
	3. Mějme predikát concat/3, který spojí dva seznamy:
		concat ( [ ] , L , L ) .
		concat ( [ X| T ] , L , [ X| S ] ) : − concat (T, L , S ) .

		Jaký bude výsledek volání predikátu r(+I,-O), který je definován následovně (+I značí zadaný vstup a -O nalezený výstup) ?

		r ([] ,[]).
		r ( [ X| T ] , L): − r (T, T1 ) , concat ( T1 , [ X] , L ) .
	    * Zavolání %concat(+S1, +S2, -X). vrátí X = zřetězení S1 s S2.
	    * Predikát %r(+S1,-X) udělá revers vloženého seznamu.
	4. Liší se nějak následující Prolog dotazy ?
		X = 1 + 3.
		X is 1 + 3.
	    * První výraz pouze unifikuje X s výrazem "1 + 3", tedy vrátí X = 1 + 3.
	    * Druhý výraz sečte to co je na pravo a pak to unifukuje s X, tedy vrátí X = 4.
	    
12. Rozhraní pro synchronizaci
	1. Napište rozhraní zámku (mutex) jako objektu pro synchronizaci. Popište sémantiku metod.
	2. Načrtněte možnou implementaci zámku z předchozího bodu (stačí minimální funkční řešení).
	3. Napište rozhraní podmínkové proměnné (condition variable) jako objektu pro synchronizaci. Popište sémantiku metod.
	4. Vysvětlete, proč některé metody rozhraní podmínkové proměnné akceptují zámek jako parametr.

=============
= léto 2016 =
=============
15. Programovací jazyky
	Pro vypracování otázky si zvolte jeden z jazyků C#, C++, Java (volbu vyznačte).
	1. Navrhněte objektový model pro dokument zapsaný ve zjednodušené verzi XML, kde stromová struktura jazyka obsahuje
	pouze elementy, které mohou mít atributy (atribut je dvojice jméno, hodnota). Pořadí elementů je podstatné, pořadí
	atributů podstatné není, u jednoho elementu nelze opakovat atributy se stejným jménem.
	Model by měl umožnit vytištění dokumentu v obvyklém formátu a jeho snadnou modifikaci (přidávání atributu a podobně).
	Respektujte pravidla objektového návrhu (čeká se návrh objektového modelu, tedy v tomto bodě není třeba psát těla
	metod).
	2. Přidejte do modelu metodu „forEach“ (včetně těla), která jako parametr akceptuje lambda výraz a aplikuje jej na každý
	atribut elementu, na kterém je zavolána a na všechny podelementy daného elementu. Lambda výraz má dva parametry,
	atribut a element atributu.
	Příklad dokumentu:
	<element1key1="value1" key2="value2">
	  <element2key1="value1" key2="value2"/>
	  <element2key1="value1" key2="value2"/>
	</element1>

16. Programovací jazyky
	Pro vypracování otázky si zvolte jeden z jazyků C#, C++, Java (volbu vyznačte).
	1. Navrhněte třídu, která bude poskytovat dynamické pole (kontejner, do kterého lze neomezeně přidávat další objekty a
	udržuje se pořadí objektů podle vkládání). Pole umožní alespoň přidávat nové objekty na konec, zjistit počet objektů v
	poli a vrátit objekt na dané pozici.
	Dbejte na to, aby váš návrh co nejméně omezoval typy ukládaných objektů, ale přitom poskytoval běžnou typovou bez-
	pečnost.
	Naznačte podstatné části implementace (definice třídy, hrubě těla metod).
	2. Napište (ideálně jednou větou), co je (ve vztahu k dynamickému poli) iterátor či enumerátor (dle zvoleného implementačního
	jazyka) a naznačte implementaci iterátoru či enumerátoru pro vaší implementaci dynamického pole.
	3. Do třídy implementující dynamické pole přidejte metodu „sort“, která pole na místě setřídí pomocí algoritmu QuickSort.
	Tento algoritmus neimplementujte, pouze napište, jak bude vypadat deklarace metody (parametry a návratová hodnota), a
	zda kvůli ní budete muset nějak upravit zbytek vaší třídy pro dynamické pole. Metodu navrhněte tak, aby v ní byl QuickSort
	principiálně implementovatelný, tedy například stanovte případná omezení na hodnoty vkládané do pole a popište, jak se
	taková omezení vyjádří v kódu.

=============
= jaro 2016 =
=============
nic

===============
= podzim 2015 =
===============

10. Objektově orientované programování
	Pro vypracování otázky si zvolte jeden z jazyků C#, C++, Java. V odpovědi můžete vynechat nepodstatné syntaktické detaily,
	hodnotí se zejména použití vhodných nástrojů jazyka. Otázka se týká objektového modelu, očekává se tedy definice rozhraní tříd
	(hlavní metody a atributy), nikoliv implementace (těla metod).
	Virtuální stroj pracuje s pojmenovanými proměnnými a se zásobníkem, má instrukce pro přemisťování hodnot mezi proměnnými
	a vrcholem zásobníku, aritmetické instrukce odpovídající operátorům v postfixové notaci a instrukce (podmíněných) skoků pro
	realizaci větvení a cyklů v pseudokódu. Příklad kódu reprezentujícího výraz „a = b < c ? d - e : f“:
	0:PUSH b
	1:PUSH c
	2:JGE 7
	3:PUSH d
	4:PUSH e
	5:SUB
	6:JMP 8
	7:PUSH f
	8:POP a
	
	1. Navrhněte objektovou datovou strukturu pro reprezentaci pseudokódu virtuálního stroje. Datová struktura by měla umož-
	ňovat jednak provádění instrukcí, jednak výstup pseudokódu v textové podobě. Důraz je kladen na čistotu objektového
	návrhu a snadnou rozšiřitelnost množiny instrukcí, důležitá je i rychlost provádění instrukcí.
	2. Kde a jak budete reprezentovat stav stroje, tedy zásobník, hodnoty proměnných a ukazatel instrukcí ?
	3. Princip řešení vysvětlete podrobněji na reprezentaci instrukcí „PUSH v“ (uložení hodnoty proměnné v na zásobník) a „JGE
	x“ (porovnání dvou hodnot na vrcholu zásobníku a podmíněný skok na adresu x).
	4. Jak minimalizovat opakující se kód při implementaci podobných instrukcí (například binárních operací) ?

11.Šablony a generika
	Dva základní způsoby implementace kontejnerových typů (dynamická pole, vyhledávací stromy, hashovací tabulky ...) v objek-
	tových jazycích jako Java, C# nebo C++ jsou s využitím polymorfismu a s využitím šablon či generik.
	1. Ilustrujte oba způsoby implementace kontejnerových typů na návrhu rozhraní kontejneru reprezentujícího množinu objektů
	s uspořádáním. Zvolte si některý z jazyků Java, C# nebo C++, ve vaší implementaci stačí uvést veřejné rozhraní (třídy a
	metody) pro vkládání objektu a pro testování přítomnosti objektu.
	2. Srovnejte výhody a nevýhody obou přístupů.
	3. Co musí platit pro objekty, které budeme chtít vložit do kontejneru z prvního bodu (setříděná množina) ?
	4. Jak se požadavku z předchozí otázky docílí v kódu ?

=============
= léto 2015 =
=============
11. Objektově orientované programovánı́
Pro vypracovánı́ otázky si zvolte jeden z jazyků C#, C++, Java. V odpovědi můžete vynechat nepodstatné syntaktické detaily,
hodnotı́ se zejména použitı́ vhodných nástrojů jazyka. Otázka se týká objektového modelu, očekává se tedy definice rozhranı́
třı́d (hlavnı́ metody a atributy), nikoliv implementace (těla metod).

Navrhněte objektový model pro jednoduchý vektorový grafický editor umožňujı́cı́ kreslit v rovině kruhy a obdélnı́ky. Tyto objekty
se mohou překrývat a proto je nutné zachovávat jejich pořadı́ vykreslovánı́ (Z-order). Model by měl umožnit vykreslenı́ scény,
vyhledánı́ objektu na daných souřadnicı́ch a dále manipulaci s objekty jako přidánı́, odebránı́ a přesun na popředı́ či do pozadı́.

Respektujte zásady modernı́ho objektového programovánı́, řešenı́ by mělo být snadno rozšiřitelné o dalšı́ druhy objektů. V
odpovědi neřešte efektivitu vykreslovánı́ a vyhledánı́ podle souřadnic.

12. Objektově orientované programovánı́
Pro vypracovánı́ otázky si zvolte jeden z jazyků C#, C++, Java. V odpovědi můžete vynechat nepodstatné syntaktické detaily,
hodnotı́ se zejména použitı́ vhodných nástrojů jazyka. Otázka se týká objektového modelu, očekává se tedy definice rozhranı́
třı́d (hlavnı́ metody a atributy), nikoliv implementace (těla metod).

Navrhněte objektový model pro stromovou reprezentaci matematických výrazů s proměnnými, konstantami, unárnı́mi a binárnı́mi
operátory. Model by měl umožnit vytištěnı́ výrazu v prefixové notaci a vyhodnocenı́ výrazu pro zadané hodnoty proměnných.
Respektujte pravidla objektového návrhu a umožněte snadnou rozšiřitelnost o dalšı́ operátory.

=============
= jaro 2015 =
=============
4. Principy implementace objektově orientovaných jazyků
        Pro následujı́cı́ otázky (a vaše odpovědi) si zvolte jeden z jazyků C#, C++, Java (vaši volbu vyznačte). Pokud otázky požadujı́
        psanı́ kódu, hodnotı́ se rámcová správnost, nikoliv detailnı́ syntaxe.
        
        1. Základnı́mi koncepty vašeho jazyka jsou třı́dy a objekty a jejich metody a atributy. Napište fragment kódu, který tyto
           koncepty ilustruje (definuje třı́du, vytvářı́ objekty, volá metody, použı́vá atributy).
        2. Váš jazyk podporuje statické metody a atributy. Napište fragment kódu, který ilustruje jejich použitı́ a vysvětlete, jak se
           lišı́ od běžných metod a atributů.
        3. Při objektovém modelovánı́ je často vhodné definovat typ zastřešujı́cı́ společné vlastnosti několika různých třı́d, napřı́klad
           typ reprezentujı́cı́ libovolnou iterovatelnou kolekci a samotné jednotlivé kolekce. Jak byste tuto situaci zapsali ve vašem
           jazyce (opět fragment kódu) ?

===============
= podzim 2014 =
===============
7. Principy implementace objektově orientovaných jazyků

  1. Vysvětlete rozdı́l mezi předávánı́m parametrů funkce (metody) hodnotou (pass by value) a odkazem (pass by reference).
V jakých situacı́ch se hodı́ jeden či druhý způsob předávánı́ parametrů ?
Uvažujte následujı́cı́ kód (z dostupných verzı́ si vyberte jeden programovacı́ jazyk, pozor, verze se nechovajı́ stejně):

Listing 1: Java
c l a s s Main {
s t a t i c void f ( I n t e g e r x ) {
i f ( x > 0 ) { x−−; f ( x ) ; }
}
public s t a t i c void main ( S t r i n g [ ] arguments ) {
int a = 8 ; f ( a ) ;
System . out . p r i n t l n ( a ) ;
}
}
Listing 2: C++
#include <i o s t r e a m >
void f ( int &x ) {
i f ( x > 0 ) { x−−; f ( x ) ; }
}
int main ( ) {
int a = 8 ; f ( a ) ;
s t d : : c o u t << a << s t d : : e n d l ;
return ( 0 ) ;
}
Listing 3: C#
using System ;
c l a s s Example {
s t a t i c void f ( r e f int x ) {
i f ( x > 0 ) { x−−; f ( r e f x ) ; }
}
s t a t i c void Main ( string [ ] arguments ) {
int a = 8 ; f ( r e f a ) ;
C o n s o l e . WriteLine ( a ) ;
}
}

  2. Kolikrát se zavolá funkce f ?
  3. Jaký výstup napı́še kód při spuštěnı́ ?

8. Principy implementace objektově orientovaných jazyků

  1. Vysvětlete, co je statický atribut třı́dy (static field, static class variable, static member variable).
  2. Uvažujte třı́du s následujı́cı́m rozhranı́m (z dostupných verzı́ si vyberte jeden programovacı́ jazyk):

Listing 4: Java
public c l a s s S i n g l e t o n {
public s t a t i c S i n g l e t o n g e t I n s t a n c e ( ) {
...
}
}
Listing 5: C++
class Singleton {
public :
s t a t i c S i n g l e t o n& g e t I n s t a n c e ( ) {
...
}
} ;
Listing 6: C#
public c l a s s S i n g l e t o n {
public s t a t i c S i n g l e t o n I n s t a n c e {
get {
...
}
}
}
Doplňte implementaci třı́dy Singleton tak, aby uvedená metoda (getter) vždy vracela referenci na jedinou Singleton instanci,
a aby se tato instance vytvořila při prvnı́m volánı́ uvedené metody (getteru). Neuvažujte existenci vı́ce vláken.

  3. Jak docı́lı́te toho, aby programátor neměl možnost obejı́t uvedenou metodu (getter) a vytvořit si vı́ce instancı́ třı́dy Singleton
napřı́klad přı́mo volánı́m new ?
=============
= léto 2014 =
=============
4. Principy implementace objektově orientovaných jazyků

  1. Předpokládejte následujı́cı́ definice třı́d a jejich použitı́ (z dostupných fragmentů kódu si vyberte jeden programovacı́ jazyk):

Listing 1: Java
c l a s s A { void M ( ) { System . out . p r i n t l n ( ”A : :M” ) ; } }
c l a s s B extends A { void M ( ) { System . out . p r i n t l n ( ”B : :M” ) ; } }
A a = new A ( ) ; B b = new B ( ) ; A ab = new B ( ) ;
a .M ( ) ; b .M ( ) ; ab .M ( ) ;
Listing 2: C++
c l a s s A { public : v i r t u a l void M ( ) { s t d : : c o u t << ”A : :M” << s t d : : e n d l ; } } ;
c l a s s B : public A { public : v i r t u a l void M ( ) { s t d : : c o u t << ”B : :M” << s t d : : e n d l ; } } ;
A ∗a = new A ( ) ; B ∗b = new B ( ) ; A ∗ab = new B ( ) ;
a−> M ( ) ; b−> M ( ) ; ab−> M ( ) ;
Listing 3: C#
c l a s s A { public v i r t u a l void M ( ) { C o n s o l e . WriteLine ( ”A : :M” ) ; } } ;
c l a s s B : A { public override void M ( ) { C o n s o l e . WriteLine ( ”B : :M” ) ; } } ;
A a = new A ( ) ; B b = new B ( ) ; A ab = new B ( ) ;
a .M ( ) ; b .M ( ) ; ab .M ( ) ;
Jaký výstup napı́še fragment kódu při spuštěnı́ ?

  2. Předpokládejte, že v předchozı́ch definicı́ch je navı́c ještě následujı́cı́:

Listing 4: Java
c l a s s A { A ( ) { System . out . p r i n t l n ( ”A” ) ; } . . .
c l a s s B extends A { B ( ) { System . out . p r i n t l n ( ”B” ) ; } . . .
Listing 5: C++
c l a s s A { public : A ( ) { s t d : : c o u t << ”A” << s t d : : e n d l ; } . . .
c l a s s B : public A { public : B ( ) { s t d : : c o u t << ”B” << s t d : : e n d l ; } . . .
Listing 6: C#
c l a s s A { public A ( ) { C o n s o l e . WriteLine ( ”A” ) ; } . . .
c l a s s B : A { public B ( ) { C o n s o l e . WriteLine ( ”B” ) ; } . . .

Změnı́ se nějak výstup vypsaný fragmentem kódu z prvnı́ho bodu a pokud ano, jaký bude ?

  3. Předpokládejte, že na konci všech metod přidaných v předchozı́m bodě je navı́c ještě volánı́ M (). Změnı́ se nějak výstup
vypsaný fragmentem kódu z prvnı́ho bodu a pokud ano, jaký bude ?


=============
= jaro 2014 =
=============
5. Objektově orientované programovánı́
   1. Kdy se v objektově orientovaných jazycı́ch označuje třı́da za abstraktnı́ a k čemu taková třı́da sloužı́ ?
   2. K čemu v objektově orientovaných jazycı́ch sloužı́ konstruktor a destruktor ?
   3. Které z výsledků "", "A", "B", "AB" a "BA může vytisknout následujı́cı́ kód ?
        class A
        {
          public A () { System.out.print ("A"); }
        }
        class B extends A
        {
          public B () { System.out.print ("B"); }
        }

        Object o = new B ();
   4. Může konstruktor selhat ?

===============
= podzim 2013 =
===============

9. Principy implementace objektově orientovaných jazyků
        1. Předpokládejte existenci datových typů Executable a Printable. Na objektech typu Executable lze volat metodu execute().
        Na objektech typu Printable lze volat metodu print(). Jak byste definovali typ, který je současně Executable a Printable ?
        Zvolte si jeden z jazyků Java, C++ nebo C# a definici v něm zapište. Jde o použité typové konstrukce, drobné syntaktické
        chyby nehrajı́ roli.
        2. Pro jazyk zvolený v předchozı́m bodě napište, jaké možnosti nastavenı́ přı́stupu k prvkům třı́d (access modifiers, access
        specifiers) jsou k dispozici (název i funkci).
        3. V jakých situacı́ch je vhodné použı́t konstruktor s privátnı́m přı́stupem ?

10. Principy implementace objektově orientovaných jazyků
        1. Vysvětlete rozdı́l mezi běžnými a virtuálnı́mi metodami v C++. Může se rychlost volánı́ běžných a virtuálnı́ch metod lišit ?
        Proč ?
        2. Může mı́t třı́da virtuálnı́ konstruktor nebo virtuálnı́ destruktor ? Pokud ano, v jaké situaci se použı́vá ? Pokud ne, proč ?
        3. Uvažujte následujı́cı́ fragment kódu v C++.
class A
{
public :
v i r t u a l   v o i d   f ( ) { p r i n t f ( ”A. f \n ” ) ; }
} ;
class B : public A
{
public :
v i r t u a l   v o i d   f ( ) { p r i n t f ( ”B . f \n ” ) ; }
} ;
int
{
main ( v o i d )
A ∗u = new A ( ) ;
B ∗v = new B ( ) ;
C ∗w = new B ( ) ;
u−>f ( ) ;
v−>f ( ) ;
w−>f ( ) ;
( (A∗ ) w)−> f ( ) ;
( (A) ( ∗w ) ) . f ( ) ;
}
Jaké funkce se zavolajı́ ?

=============
= léto 2013 =
=============
9. Principy implementace objektově orientovaných jazyků
        1. Vysvětlete použitı́ výjimek jako prostředků pro řı́zenı́ toku programu v OO jazycı́ch. K popisu použijte konkrétnı́ syntaxi
        jazyka C#, C++ nebo Java.
        2. Uvažujte následujı́cı́ kód zpracovávajı́cı́ obsah souboru. Předpokládejte, že všechny volané metody mohou házet výjimky.
        Ošetřete je.
        Data SomeFunction ()
        {
        File f = File.open ("some.file");
        Data d = f.readall ();
        f.close ();return (d);
        }
        3. Vysvětlete, jak se ošetřenı́ v předchozı́m bodě lišı́ pro jazyky s a bez konstrukce finally.

=============
= jaro 2013 =
=============
2. Synchronizace
  1. Uvažujte třı́du implementujı́cı́ podmı́nkovou proměnnou s následujı́cı́ signaturou:
class ConditionVariable
{
ConditionVariable (Lock lock);
void wait ();
void signal ();
void broadcast ();
};
Popište sémantiku jednotlivých metod.

  2. Uvažujte dvě vlákna přistupujı́cı́ ke sdı́lené proměnné podle následujı́cı́ho náčrtku. Jedno čas od času zapisuje, druhé
zobrazuje některé zapsané hodnoty. Operace nad sdı́lenou proměnnou jsou atomické.
void WriterThreadBody ()
{
while (true)
{
shared_value = DoSomeCalculation ();
}
};
void ReaderThreadBody ()
{
int last_value = NONEXISTENT_VALUE;
while (true)
{
while (last_value == shared_value) { };
DisplayValue (shared_value);
last_value = shared_value;
}
};
S použitı́m podmı́nkové proměnné a přı́padně dalšı́ch synchronizačnı́ch nástrojů upravte implementaci tak, aby čekala
pasivně.

4. Principy implementace objektově orientovaných jazyků
  1. Vysvětlete rozdı́l mezi běžnou a virtuálnı́ dědičnostı́ v jazyce C++.
  2. Uvažujte následujı́cı́ fragment kódu v C++.
class A { int a; };
class B : public A { int b; };
A *a;
B *b;
a = b;
b = a;
a = dynamic_cast<A*> (b);
b = dynamic_cast<B*> (a);
Která z uvedených přiřazenı́ nelze provést a proč ?

  3. Popište cenu typových konverzı́ z předchozı́ otázky za běhu programu.


5. Neprocedurálnı́ programovánı́
  Uvažujte následujı́cı́ proceduru p/2 v jazyce Prolog.
    p([X],[X]). 
    p([X|R],[Y,X|S]) :- p(R,[Y|S]).
  1. Vysvětlete, jaký bude výsledek volánı́ p(+I,-O), kde +I značı́ zadaný vstup a -O nalezený výstup.
  2. Je uvažovaná procedura deterministická ? Je to vhodné ?


===============
= podzim 2012 =
===============
11. Šablony a generika
template <class A> class B
{
public:
void f (A a) { ... }
}
public class B<A>
{
public void f (A a) { ... }
}
1. Uvedené fragmenty kódu ilustrujı́ šablony a generika. Vysvětlete, jaké typy uvedené fragmenty kódu definujı́.
2. Ilustrujte použitı́ šablon nebo generik na definici rozhranı́ třı́dy, která implementuje FIFO frontu s metodami vloženı́
poslednı́ho a vyjmutı́ prvnı́ho prvku.

=============
= léto 2012 =
=============
9. Principy implementace objektově orientovaných jazyků
  1. Vysvětlete použitı́ výjimek jako prostředků pro řı́zenı́ toku programu v OO jazycı́ch. K popisu použijte konkrétnı́ syntaxi
jazyka C#, C++ nebo Java.
  
  2. Jak ošetřı́te situaci, kdy bez ohledu na to, zda byla nebo nebyla hozena výjimka, potřebujete před opuštěnı́m funkce uvolnit
přidělený prostředek ? Uvažujte napřı́klad tuto skicu kódu:
void SomeFunction ()
{
File f = open ("some.file");
FunctionThatCanThrow ();
f.close ()
}

  3. Co udělá běhová podpora OO jazyka v přı́padě, že dojde k hozenı́ výjimky, kterou kód programu neošetřuje ?
  
=============
= jaro 2012 =
=============
5. Objektově orientované programovánı́
        1. Co je polymorfismus v objektově orientovaných jazycı́ch ?
        2. Co jsou to virtuálnı́ metody ?
        3. Předpokládejte, že máte implementovat třı́du reprezentujı́cı́ setřı́děný seznam objektů a přitom co nejméně typově omezit
        prvky seznamu. Vaše implementace pochopitelně musı́ být schopna prvky seznamu porovnat, jaký objektově orientovaný
        mechanismus použijete ? Řešenı́ načrtněte ve vámi zvoleném staticky typovaném objektově orientovaném programovacı́m
        jazyce (vyžadujı́ se definice typů, nikoliv implementace metod seznamu).
